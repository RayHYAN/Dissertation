import os
from turtle import color
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
# import tensorflow as tf

folder_path = 'D:/Work/UCL/Modules/Dissertation/code/'
EEGDL_path_e5_05 = os.path.join(folder_path, './result/Thin_Residual_Convolutional_Neural_Network_0.5_1e-05_32.csv')
EEGDL_path_e4_05 = os.path.join(folder_path, './result/Thin_Residual_Convolutional_Neural_Network_0.5_0.0001_32.csv')
EEGDL_path_e5_08 = os.path.join(folder_path, './result/Thin_Residual_Convolutional_Neural_Network_0.8_1e-05_32.csv')
EEGDL_path_e4_08 = os.path.join(folder_path, './result/Thin_Residual_Convolutional_Neural_Network_0.8_0.0001_32.csv')
EEGDL_path_e4_08_64 = os.path.join(folder_path, './result/Thin_Residual_Convolutional_Neural_Network_0.8_0.0001_64.csv')
EEGDL_path_e4_08_16 = os.path.join(folder_path, './result/Thin_Residual_Convolutional_Neural_Network_0.8_0.0001_16.csv')
EEGNet_folder = os.path.join(folder_path, './Dissertation/eegmodels/examples/res/')
EEGNet_path_8_32_32 = os.path.join(EEGNet_folder, 'res_0.8_32_32.csv')
EEGNet_path_8_32_64 = os.path.join(EEGNet_folder, 'res_0.8_32_64.csv')
EEGNet_path_8_32_125 = os.path.join(EEGNet_folder, 'res_0.8_32_125.csv')
EEGNet_path_5_32_32 = os.path.join(EEGNet_folder, 'res_0.5_32_32.csv')
EEGNet_path_5_32_64 = os.path.join(EEGNet_folder, 'res_0.5_32_64.csv')
EEGNet_path_5_32_125 = os.path.join(EEGNet_folder, 'res_0.5_32_125.csv')
EEGNet_path_8_16_32 = os.path.join(EEGNet_folder, 'res_0.8_16_32.csv')
EEGNet_path_8_16_64 = os.path.join(EEGNet_folder, 'res_0.8_16_64.csv')
EEGNet_path_8_16_125 = os.path.join(EEGNet_folder, 'res_0.8_16_125.csv')
EEGNet_path_5_16_32 = os.path.join(EEGNet_folder, 'res_0.5_16_32.csv')
EEGNet_path_5_16_64 = os.path.join(EEGNet_folder, 'res_0.5_16_64.csv')
EEGNet_path_5_16_125 = os.path.join(EEGNet_folder, 'res_0.5_16_125.csv')

data = pd.read_csv(EEGDL_path_e4_05)
data1 = pd.read_csv(EEGDL_path_e4_08)
data2 = pd.read_csv(EEGDL_path_e5_05)
data3 = pd.read_csv(EEGDL_path_e5_08)
# EEGNet_data_1 = pd.read_csv(EEGNet_path_8_32_32)
EEGNet_data_2 = pd.read_csv(EEGNet_path_8_32_64)
EEGNet_data_3 = pd.read_csv(EEGNet_path_8_32_125)
# EEGNet_data_4 = pd.read_csv(EEGNet_path_5_32_32)
EEGNet_data_5 = pd.read_csv(EEGNet_path_5_32_64)
EEGNet_data_6 = pd.read_csv(EEGNet_path_5_32_125)
# EEGNet_data_7 = pd.read_csv(EEGNet_path_8_16_32)
EEGNet_data_8 = pd.read_csv(EEGNet_path_8_16_64)
EEGNet_data_9 = pd.read_csv(EEGNet_path_8_16_125)
# EEGNet_data_10 = pd.read_csv(EEGNet_path_5_16_32)
EEGNet_data_11 = pd.read_csv(EEGNet_path_5_16_64)
EEGNet_data_12 = pd.read_csv(EEGNet_path_5_16_125)

# EEG-DL
# fig = plt.figure(figsize=(11,4))
# ax1 = fig.add_subplot(121)
# ax1.plot(data['train_acc'], label='0.0001 & 0.5')
# # ax1.plot(data['test_acc'], label='test_32', color='#1F77B4', ls='--')
# ax1.plot(data1['train_acc'], label='0.0001 & 0.8')
# # ax1.plot(data1['test_acc'], label='test_64', color='#FF7F0E', ls='--')
# ax1.plot(data2['train_acc'], label='0.00001 & 0.5')
# # ax1.plot(data2['test_acc'], label='test_16', color='#2CA02C',ls='--')
# ax1.plot(data3['train_acc'], label='0.00001 & 0.8')
# plt.ylim(0.0, 1.0)
# # ax1.set_title('Model accuracy')
# ax1.set_title('Training Accuracy')
# ax1.legend()
# ax2 = fig.add_subplot(122)
# ax2.plot(data['test_acc'], label='0.0001 & 0.5')
# # ax2.plot(data['test_loss'], label='test_32', color='#1F77B4', ls='--')
# ax2.plot(data1['test_acc'], label='0.0001 & 0.8')
# # ax2.plot(data1['test_loss'], label='test_64', color='#FF7F0E', ls='--')
# ax2.plot(data2['test_acc'], label='0.00001 & 0.5')
# # ax2.plot(data2['test_loss'], label='test_16', color='#2CA02C',ls='--')
# ax2.plot(data3['test_acc'], label='0.00001 & 0.8')
# # ax2.set_title('Model loss')
# ax2.set_title('Test Accuracy')
# plt.ylim(0.0, 1.0)
# ax2.legend()
# plt.show()

# EEGNet
fig = plt.figure(figsize=(11,4))
ax1 = fig.add_subplot(121)
ax1.plot(EEGNet_data_2['acc'], label='train_acc')
ax1.plot(EEGNet_data_3['acc'], label='train_acc')
ax1.plot(EEGNet_data_11['val_acc'], label='test_acc')
ax1.plot(EEGNet_data_12['val_acc'], label='test_acc')
# plt.ylim(0.0, 1.0)
ax1.set_title('Model accuracy')
ax1.legend()
ax2 = fig.add_subplot(122)
ax2.plot(EEGNet_data_2['loss'], label='train_loss')
ax2.plot(EEGNet_data_2['val_loss'], label='test_loss')
ax2.set_title('Model loss')
# plt.ylim(0.2, 2)
ax2.legend()
plt.show()